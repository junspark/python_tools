#####################################
#
#	DetectorFunctions
#
#	Random wrapper functions which may or may not be stable APS macro calls
#	These are the macros that can be changed as APS standard macros are changed
#	These are the only the macros that should be changed, things like DoVolume
#	should not be changed
#
#	These use AreaDetector as image acquisition program
#
#####################################


############
# Modified for using Retiga in C-hutch
############

def TakeStillImage( fExposureTime ) '{
    # Also refreshes the counters
	waitmove	
    ccdset_period_adretiga 0.01
	sleep( 0.05 )
    count_em fExposureTime+0.1
	det_trig_bright fExposureTime
    waitcount
    getcounts
    # This is longer than the exposure time, so det_wait is not necessary
    # But not always true, so det_wait is necessary
	det_wait
    # after calling you can use the array S for getting the IC values as monitor counters.
}'

def TakeStillImage_Dark( fExposureTime ) '{
    # It really shuts the fast shutter during exposure
    # Also refreshes the counters
	waitmove	
    ccdset_period_adretiga 0.01
	sleep( 0.05 )
    count_em fExposureTime+0.1
	det_trig_dark fExposureTime
    waitcount
    getcounts
	det_wait
    # This is longer than the exposure time, so det_wait is not necessary
	#det_wait
    # after calling this you can use the array S for getting the IC values as monitor counters.
}'


def det_trig_dark '{
        local x
        if( $# != 1) {
            p "Usage: $0 time(sec)"
            exit
        } 
        shutter_manual
        Cclose
        det_trig $1
}'

def det_trig_bright '{
        local x
        if( $# != 1) {
            p "Usage: $0 time(sec)"
            exit
        } 
        shutter_sweep
        det_trig $1
}'

###################################


def ChangeCamera( sCameraName, sFileType, fExposureTime ) '{
	if (sCameraName == 0) {
		p "Usage: ChangeCamera( sCameraName sFileType fExposureTime )"
	} else {
		CCDPV=sprintf("%s", sCameraName)
		#sFileType = "1idCS:TIFF1:"
  #??? What does the next line?
		sprintf( "use_ad_csnap %s %s", sCameraName, sFileType)
		UpdateExposureTime( sCameraName, fExposureTime )
	}
}'


def UpdateExposureTime( fExposureTime ) '{
	#change later to include camera number as argument
	#epics_put( sprintf( "%sAquireTime, fExposureTime", sCameraName ) )
	ccdset_time fExposureTime
	#CameraInitialize( sCameraName )
}'


def ChangeImageName( sPrefix ) '{
	#change later to include camera number as argument
	ccdset_filename_ad( sPrefix )
	#CameraInitialize( sCameraName )
}'


def ChangeImageNumber( nNumber ) '{
	#change later to include camera number as argument
	ccdset_seqnum nNumber
	#CameraInitialize( sCameraName )
}'


def CameraInitialize( sCameraName ) '{
	sprintf( "%sInitialize", sCameraName )
	epics_put( sprintf( "%sInitialize", sCameraName ) )
}'


def GetImageNumber( ) '{
	#p epics_get( "1idCS:TIFF1:FileNumber" )
	p ccdget_seqNumber
}'

def FilePluginWait '{
    while(epics_get(sprintf("%sWriteFile_RBV",ADFILEPV))!="Done") {
       sleep(0.02)
    }
}'

def GetImagePrefix() '{
	p ccdget_filename()
	#p epics_get( "1idCS:TIFF1:FileName" )
}'


#def EndOfScan() '{
#	Cclose
#        p "Closing camera shutter"
#}'


# deprecated
#def SwitchToGE() '{
#	use_ge GEaSi:det1:
#	CameraInitialize( CCDPV )
#}'


#def SwitchToCoolSnap() '{
#	use_ad_csnap 1idCS:cam1: 1idCS:TIFF1:
#	CameraInitialize( CCDPV )
#}'
