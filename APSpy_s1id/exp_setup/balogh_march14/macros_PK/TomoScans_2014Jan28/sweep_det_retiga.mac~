#######################Implements hook macros in sweep_core.mac


global OSC[] 
global CCDPV
global SOFTIOC_USE SOFTIOC_PV MATLAB_OK
global IS_SWEEPSCAN
global parfile
global CCD_DET[]
global EPICS_DELAY

if(unset("SOFTIOC_PV")) {
    SOFTIOC_PV="1id:taz:"
}

##########set up AD for Retiga
CCD_DET["AD_retiga"] = "use_ad_retiga [det. pv_prefix] [adfile_prefix]"
def use_ad_retiga '{
	ccdhook_adretiga $*
    OSC["detector"]="Retiga"
    if( $#==2 ) {
        CCDPV="$1"; ADFILEPV="$2";
	}
    else {
        CCDPV=getsval("detector PV prefix","QIMAGE:cam1:")
        ADFILEPV = getsval("AD file PV prefix","QIMAGE:TIFF1:")
    } 
    rdef det_trig \'_adretigatrig_xtime\'
    rdef det_wait \'_adretiga_wait\'
    rdef detget_imgprefix \'detget_imgprefix_ad\'
    rdef detget_seqNumber \'detget_seqNumber_ad\'
    rdef detabort \'detabort_ad\'
    OSC["detDelay"] =0.0
    OSC["cushion_time"]=0.0
    printf("Detector related macros are re-defined to %s\n",OSC["detector"])
    adretiga_setup 
}'

def _adretiga_wait '{
    while(epics_get(sprintf("%sAcquire",CCDPV))!="Done") {
        sleep(EPICS_DELAY)
    }
}'

def _adretigatrig_xtime '{
    if( $# != 1) {
        p "Usage: _adretigatrig_xtime time(sec)"
        exit
    } 
    _adretiga_wait
    ccdset_time_adretiga $1
    epics_put(sprintf("%sqInitialize",CCDPV),1)
    sleep(EPICS_DELAY)

    epics_put(sprintf("%sAcquire",CCDPV),"Acquire")
}'

def adretiga_setup '{
    epics_put(sprintf("%sImageMode",CCDPV),"Single")
	epics_put(sprintf("%sTriggerMode",CCDPV),"Software")
	epics_put(sprintf("%sqReadoutSpeed",CCDPV), 0) # 20 MHz
	epics_put(sprintf("%sqImageFormat",CCDPV), "Raw16") # Raw16
	epics_put(sprintf("%sqCoolerActive",CCDPV), "On") # On
	epics_put(sprintf("%sAcquireTime",CCDPV), 1.0) # 1 sec
	epics_put(sprintf("%sAcquirePeriod",CCDPV), 1.0) # 1 sec
	#epics_put(sprintf("%sGain",CCDPV), 2.0)   
	epics_put(sprintf("%sqOffset",CCDPV), 0) # Offset level, integer
	epics_put(sprintf("%sTemperature",CCDPV), -45.0) # Temp=-45C

	epics_put(sprintf("%sBinX",CCDPV), 1) # 1
	epics_put(sprintf("%sBinY",CCDPV), 1) # 1
	epics_put(sprintf("%sMinX",CCDPV), 0) # 0
	epics_put(sprintf("%sMinY",CCDPV), 0) # 0
	epics_put(sprintf("%sSizeX",CCDPV), 2048) # 2048
	epics_put(sprintf("%sSizeY",CCDPV), 2048) # 2048
	epics_put(sprintf("%sReverseX",CCDPV), "No") # No=0
	epics_put(sprintf("%sReverseY",CCDPV), "No") # No=0
	epics_put(sprintf("%sDataType",CCDPV), "UInt16") # UInt16
	epics_put(sprintf("%sColorMode",CCDPV), "Mono") # Mono


    epics_put(sprintf("%sAutoIncrement",ADFILEPV),"Yes")
    epics_put(sprintf("%sFileWriteMode",ADFILEPV),"Single")
    epics_put(sprintf("%sAutoSave",ADFILEPV),"No")

    sleep(EPICS_DELAY)
    epics_put(sprintf("%sqInitialize",CCDPV),1)
}'


